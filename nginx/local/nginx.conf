load_module modules/ngx_http_geoip_module.so;
load_module modules/ngx_stream_geoip_module.so;

user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    
    log_format json_analytics escape=json '{'
                            '"msec": "$msec", ' # request unixtime in seconds with a milliseconds resolution
                            '"connection": "$connection", ' # connection serial number
                            '"connection_requests": "$connection_requests", ' # number of requests made in connection
                            '"pid": "$pid", ' # process pid
                            '"request_id": "$request_id", ' # the unique request id
                            '"request_length": "$request_length", ' # request length (including headers and body)
                            '"remote_addr": "$remote_addr", ' # client IP
                            '"remote_user": "$remote_user", ' # client HTTP username
                            '"remote_port": "$remote_port", ' # client port
                            '"time_local": "$time_local", '
                            '"time_iso8601": "$time_iso8601", ' # local time in the ISO 8601 standard format
                            '"request": "$request", ' # full path no arguments if the request
                            '"request_uri": "$request_uri", ' # full path and arguments if the request
                            '"args": "$args", ' # args
                            '"status": "$status", ' # response status code
                            '"body_bytes_sent": "$body_bytes_sent", ' # the number of body bytes exclude headers sent to a client
                            '"bytes_sent": "$bytes_sent", ' # the number of bytes sent to a client
                            '"http_referer": "$http_referer", ' # HTTP referer
                            '"http_user_agent": "$http_user_agent", ' # user agent
                            '"http_x_forwarded_for": "$http_x_forwarded_for", ' # http_x_forwarded_for
                            '"http_host": "$http_host", ' # the request Host: header
                            '"server_name": "$server_name", ' # the name of the vhost serving the request
                            '"request_time": "$request_time", ' # request processing time in seconds with msec resolution
                            '"upstream": "$upstream_addr", ' # upstream backend server for proxied requests
                            '"upstream_connect_time": "$upstream_connect_time", ' # upstream handshake time incl. TLS
                            '"upstream_header_time": "$upstream_header_time", ' # time spent receiving upstream headers
                            '"upstream_response_time": "$upstream_response_time", ' # time spend receiving upstream body
                            '"upstream_response_length": "$upstream_response_length", ' # upstream response length
                            '"upstream_cache_status": "$upstream_cache_status", ' # cache HIT/MISS where applicable
                            '"ssl_protocol": "$ssl_protocol", ' # TLS protocol
                            '"ssl_cipher": "$ssl_cipher", ' # TLS cipher
                            '"scheme": "$scheme", ' # http or https
                            '"request_method": "$request_method", ' # request method
                            '"server_protocol": "$server_protocol", ' # request protocol, like HTTP/1.1 or HTTP/2.0
                            '"pipe": "$pipe", ' # "p" if request was pipelined, "." otherwise
                            '"gzip_ratio": "$gzip_ratio", '
                            '"http_cf_ray": "$http_cf_ray",'
                            '"geoip_country_code": "$geoip_country_code"'
                            '}';

    access_log  /var/log/nginx/access.log  main;
    access_log  /var/log/nginx/json_access.log json_analytics;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    # Gzip configuration
    gzip_static on;
    gzip on;
    gzip_disable "msie6";

    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 0;
    gzip_types text/plain application/javascript text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype;

    geoip_country /etc/nginx/GeoIP.dat;
    geoip_city /etc/nginx/GeoIPCity.dat;

    server {
        listen 80;
        server_name localhost;
        server_tokens off;

        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
            try_files $uri $uri/ /index.html =404;
        }

        location /api {
            try_files $uri @proxy_api;
        }

        location /api/admin {
            try_files $uri @proxy_api;
        }

        location /api/static/ {
            alias /home/app/backend/staticfiles/;
        }

        location /api/media/ {
            alias /home/app/backend/mediafiles/;
        }

        location @proxy_api {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
            proxy_redirect off;
            client_max_body_size 100M;
            proxy_pass http://backend:8000;
        }

        location /analytics {
            proxy_pass http://umami:3000;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}

stream {
    upstream backend_db_upstream {
        server backend_db:5432;
    }

    server {
        listen 5432 so_keepalive=on;
        proxy_pass backend_db_upstream;
    }
}
